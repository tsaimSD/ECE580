// ==============================
// File: complex_hashed_global_branch_predictor.v
// ==============================

module complex_hashed_global_branch_predictor #(
    parameter GHR_WIDTH = 8,
    parameter ROUNDS = 4
)(
    input  wire              clk,
    input  wire              rst,
    input  wire              predict_request,
    output reg               predicted_taken,
    input  wire              update_enable,
    input  wire              actual_taken
);

    // === Global History Register ===
    reg [GHR_WIDTH-1:0] ghr;

    // === Pattern History Table ===
    reg [1:0] pht [0:(1 << GHR_WIDTH)-1];

    // === Hashed index ===
    wire [GHR_WIDTH-1:0] index;

    complex_ghr_hasher #(
        .GHR_WIDTH(GHR_WIDTH),
        .ROUNDS(ROUNDS)
    ) hasher_inst (
        .ghr(ghr),
        .hashed_index(index)
    );

    // === Prediction ===
    always @(*) begin
        if (predict_request)
            predicted_taken = (pht[index] >= 2);
        else
            predicted_taken = 0;
    end

    // === Update logic ===
    integer i;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            ghr <= 0;
            for (i = 0; i < (1 << GHR_WIDTH); i = i + 1)
                pht[i] <= 2'b10; // weakly taken
        end else if (update_enable) begin
            if (actual_taken && pht[index] < 3)
                pht[index] <= pht[index] + 1;
            else if (!actual_taken && pht[index] > 0)
                pht[index] <= pht[index] - 1;

            ghr <= {ghr[GHR_WIDTH-2:0], actual_taken};
        end
    end

endmodule


// ==============================
// File: complex_ghr_hasher.v
// ==============================

module complex_ghr_hasher #(
    parameter GHR_WIDTH = 8,
    parameter ROUNDS = 4
)(
    input  wire [GHR_WIDTH-1:0] ghr,
    output reg  [GHR_WIDTH-1:0] hashed_index
);

    integer i;
    reg [GHR_WIDTH-1:0] hash_val;

    always @(*) begin
        hash_val = ghr;
        for (i = 0; i < ROUNDS; i = i + 1)
            hash_val = {hash_val[GHR_WIDTH-2:0], hash_val[GHR_WIDTH-1]} ^
                       ((hash_val << 3) | (hash_val >> (GHR_WIDTH - 3)));
        hashed_index = hash_val;
    end

endmodule


// ==============================
// File: tb_global_predictor_checker.sv
// ==============================

module tb_global_predictor_checker;

  parameter GHR_WIDTH = 8;
  parameter ROUNDS = 4;

  logic clk, rst;
  logic predict_request, update_enable, actual_taken;
  logic predicted_taken;

  complex_hashed_global_branch_predictor #(
    .GHR_WIDTH(GHR_WIDTH),
    .ROUNDS(ROUNDS)
  ) dut (
    .clk(clk),
    .rst(rst),
    .predict_request(predict_request),
    .predicted_taken(predicted_taken),
    .update_enable(update_enable),
    .actual_taken(actual_taken)
  );

  // Clock generation
  always #5 clk = ~clk;

  initial begin
    clk = 0;
    rst = 1;
    predict_request = 0;
    update_enable = 0;
    actual_taken = 0;
    #10 rst = 0;
  end

  // === Formal properties ===
  // Example functional sanity check
  property p_stable_prediction_when_same_input;
    @(posedge clk)
    disable iff (rst)
    (predict_request && update_enable && actual_taken === predicted_taken);
  endproperty
  assert property (p_stable_prediction_when_same_input);

endmodule


// ==============================
// File: parametric_sweep.tcl
// ==============================

set ghw_list {2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32}
set rounds_list {2 3 4 5 6 7 8 9 10}

foreach ghr $ghw_list {
  foreach rounds $rounds_list {
    puts "\n=== Running GHR_WIDTH=$ghr, ROUNDS=$rounds ==="

    reset_project -all
    set_option design_mode rtl
    set_option language_mode sv
    set_option define "GHR_WIDTH=$ghr,ROUNDS=$rounds"

    read_file -format sverilog complex_ghr_hasher.v
    read_file -format sverilog complex_hashed_global_branch_predictor.v
    read_file -format sverilog tb_global_predictor_checker.sv

    elaborate
    set_engine bmc
    prove -all

    set output_dir "results/GHR${ghr}_R${rounds}"
    file mkdir $output_dir

    report_property -all > "$output_dir/properties.txt"
    report_stats -property -all > "$output_dir/stats.txt"
  }
}

exit
